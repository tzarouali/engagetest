/*
 * This file is generated by jOOQ.
*/
package jooq.jooqobjects.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.jooqconverters.DateToLocalDateConverter;
import jooq.jooqobjects.Keys;
import jooq.jooqobjects.Test;
import jooq.jooqobjects.tables.records.ExpenseRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Expense extends TableImpl<ExpenseRecord> {

    private static final long serialVersionUID = 712605911;

    /**
     * The reference instance of <code>test.expense</code>
     */
    public static final Expense EXPENSE = new Expense();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExpenseRecord> getRecordType() {
        return ExpenseRecord.class;
    }

    /**
     * The column <code>test.expense.id</code>.
     */
    public final TableField<ExpenseRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('test.expense_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>test.expense.date</code>.
     */
    public final TableField<ExpenseRecord, LocalDate> DATE = createField("date", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "", new DateToLocalDateConverter());

    /**
     * The column <code>test.expense.amount</code>.
     */
    public final TableField<ExpenseRecord, BigDecimal> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>test.expense.reason</code>.
     */
    public final TableField<ExpenseRecord, String> REASON = createField("reason", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>test.expense.vat</code>.
     */
    public final TableField<ExpenseRecord, BigDecimal> VAT = createField("vat", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * Create a <code>test.expense</code> table reference
     */
    public Expense() {
        this("expense", null);
    }

    /**
     * Create an aliased <code>test.expense</code> table reference
     */
    public Expense(String alias) {
        this(alias, EXPENSE);
    }

    private Expense(String alias, Table<ExpenseRecord> aliased) {
        this(alias, aliased, null);
    }

    private Expense(String alias, Table<ExpenseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ExpenseRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EXPENSE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ExpenseRecord> getPrimaryKey() {
        return Keys.EXPENSE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ExpenseRecord>> getKeys() {
        return Arrays.<UniqueKey<ExpenseRecord>>asList(Keys.EXPENSE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Expense as(String alias) {
        return new Expense(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Expense rename(String name) {
        return new Expense(name, null);
    }
}
